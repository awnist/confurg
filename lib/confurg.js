// Generated by CoffeeScript 1.6.2
(function() {
  var confurg, cson, fs, merge, optimist, path, _confurg;

  fs = require('fs');

  path = require('path');

  cson = require('cson');

  optimist = require("optimist").argv;

  merge = require('tea-merge');

  _confurg = function(file) {
    var f, _i, _len, _ref;

    if (typeof file === "string") {
      _ref = [file, "" + file + ".cson", "" + file + ".json"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if ((f != null) && fs.existsSync(f) && fs.statSync(f).isFile()) {
          return cson.parseFileSync(f);
        }
      }
    } else if (file != null) {
      return file;
    }
  };

  confurg = module.exports = {
    init: function(settings, defaults) {
      var c, configConfurg, cwd, defaultConfigPath, defaultHomePath, envConfurg, envs, homeConfurg, key, matched, merged, re, val, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

      if (settings == null) {
        settings = {};
      }
      if (defaults == null) {
        defaults = {};
      }
      if (typeof settings === "string") {
        settings = {
          namespace: settings
        };
      }
      if (!((_ref = settings.namespace) != null ? _ref.match(/^\w+$/) : void 0)) {
        throw "Need namespace config parameter";
      }
      cwd = (_ref1 = settings != null ? settings.cwd : void 0) != null ? _ref1 : path.dirname(module.parent.filename);
      re = new RegExp("^" + settings.namespace + "_(\\w+)");
      envs = {};
      _ref2 = process.env;
      for (key in _ref2) {
        val = _ref2[key];
        if (matched = (_ref3 = key.match(re)) != null ? _ref3[1] : void 0) {
          envs[matched] = val;
        }
      }
      merged = {};
      defaultConfigPath = "" + cwd + "/config";
      defaultHomePath = "" + process.env.HOME + "/." + settings.namespace;
      configConfurg = _confurg((_ref4 = settings != null ? settings.config : void 0) != null ? _ref4 : defaultConfigPath);
      homeConfurg = _confurg((_ref5 = settings != null ? settings.home : void 0) != null ? _ref5 : defaultHomePath);
      envConfurg = (settings != null ? settings.env : void 0) != null ? _confurg(settings != null ? settings.env : void 0) : envs;
      _ref6 = [defaults, configConfurg, homeConfurg, envConfurg, optimist];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        c = _ref6[_i];
        if (typeof c === 'object') {
          merge(merged, c);
        }
      }
      return merged;
    }
  };

}).call(this);
