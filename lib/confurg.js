// Generated by CoffeeScript 1.6.2
(function() {
  var confurg, cson, fs, merge, path;

  fs = require('fs');

  path = require('path');

  cson = require('cson');

  merge = require('tea-merge');

  confurg = module.exports = {
    init: function(config, defaults) {
      var f, key, matched, merged, re, val, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

      if (config == null) {
        config = {};
      }
      if (defaults == null) {
        defaults = {};
      }
      if (typeof config === "string") {
        config = {
          namespace: config
        };
      }
      if (!((_ref = config.namespace) != null ? _ref.match(/^[\w\-\.]+$/) : void 0)) {
        throw "Need namespace config parameter";
      }
      if ((_ref1 = config.cwd) == null) {
        config.cwd = path.dirname(module.parent.filename);
      }
      if ((_ref2 = config.defaults) == null) {
        config.defaults = defaults;
      }
      if ((_ref3 = config.config) == null) {
        config.config = path.join(config.cwd, "config");
      }
      if ((_ref4 = config.home) == null) {
        config.home = path.join(process.env.HOME, "." + config.namespace);
      }
      if ((_ref5 = config.cli) == null) {
        config.cli = require("optimist").argv;
      }
      if (!config.env) {
        re = new RegExp("^" + config.namespace + "_(\\w+)");
        config.env = {};
        _ref6 = process.env;
        for (key in _ref6) {
          val = _ref6[key];
          if (matched = (_ref7 = key.match(re)) != null ? _ref7[1] : void 0) {
            config.env[matched] = val;
          }
        }
      }
      merged = {};
      _ref8 = ['defaults', 'config', 'home', 'env', 'cli'];
      for (_i = 0, _len = _ref8.length; _i < _len; _i++) {
        key = _ref8[_i];
        val = config[key];
        switch (typeof val) {
          case 'string':
            _ref9 = val.match(/\.[jc]son$/) && [val] || ["" + val + ".cson", "" + val + ".json"];
            for (_j = 0, _len1 = _ref9.length; _j < _len1; _j++) {
              f = _ref9[_j];
              if (fs.existsSync(f)) {
                merge(merged, cson.parseFileSync(f));
                break;
              }
            }
            break;
          case 'object':
            merge(merged, val);
            break;
          default:
            throw "Don't know what to do with content in " + key + " (" + (typeof val) + ")";
        }
      }
      return merged;
    }
  };

}).call(this);
